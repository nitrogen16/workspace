package strategy;

public class OurHashMapStorageStrategy implements StorageStrategy {

	static final int DEFAULT_INITIAL_CAPACITY = 16;
	static final float DEFAULT_LOAD_FACTOR = 0.75f;
	Entry[] table = new Entry[DEFAULT_INITIAL_CAPACITY];
	int size;
	int threshold = (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);
	float loadFactor = DEFAULT_LOAD_FACTOR;

	public int hash(Long k) {
		return table.hashCode();
	}

	public int indexFor(int hash, int length) {
		return length;
	}

	public Entry getEntry(Long key) {
		return null;
	}

	public void resize(int newCapacity) {

	}

	public void transfer(Entry[] newTable) {

	}

	public void addEntry(int hash, Long key, String value, int bucketIndex) {

	}

	public void createEntry(int hash, Long key, String value, int bucketIndex) {

	}

	@Override
	public boolean containsKey(Long key) {
		return getEntry(key) != null;
	}

	@Override
	public boolean containsValue(String value) {
		if (value == null)
			return false;
		for (Entry aTable : table) {
			for (Entry e = aTable; e != null; e = e.next)
				if (value.equals(e.value))
					return true;
		}
		return false;
	}

	@Override
	public void put(Long key, String value) {
		addEntry(hash(key), key, value, indexFor(hash(key),table.length));
	}

	@Override
	public Long getKey(String value) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getValue(Long key) {
		// TODO Auto-generated method stub
		return null;
	}

}

package strategy;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;

public class FileBucket {
	private Path path;

    public FileBucket() {
        try {
            path = Files.createTempFile(null, null);
            Files.deleteIfExists(path);
            Files.createFile(path);
        } catch (IOException e) {
            ExceptionHandler.log(e);
        }
        path.toFile().deleteOnExit();
    }

	public long getFileSize() {
		try {
			return Files.size(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return 0;
	}

	public void putEntry(Entry entry) {
		try (OutputStream os = new BufferedOutputStream(new FileOutputStream(path.toFile()))) {
			ObjectOutput entryOutputStream = new ObjectOutputStream(os);
			for (Entry e = entry; e != null; e = e.next) {
				entryOutputStream.writeObject(e);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public Entry getEntry() {
		Entry entry = null;
		try (InputStream is = new BufferedInputStream(new FileInputStream(path.toFile()))) {
			if (Files.size(path) == 0) {
				return null;
			}
			ObjectInput entryInputStream = new ObjectInputStream(is);
			entry = (Entry) entryInputStream.readObject();
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return entry;
	}

	public void remove() {
		try {
			Files.delete(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
